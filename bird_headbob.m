function [t,state,phi_minus,phi_plus,phid_minus,phid_plus,Ekin_stance,Wgravity,Wneck,Wcoll,Wpush,Ekin_plus] = bird_step(x0, parms)% separate controls and initial state:state0=x0(1:4);phat_push=x0(5); % push off impulse magnitude%tau=x0(6); % delay time wrt beginning of stance phase% Parametersg=parms.g;mp=parms.mp;   % [kg] pigeon pelvis massmh=parms.mh;  % [kg] pigeon head massalpha=parms.alpha; % [rad] leg spreadL=parms.L; % [m] leg lengthhh=parms.hh; % [m] head height relative to groundstep_length=parms.step_length; % [m] step lengthspeed=parms.speed; % [m/s] desired walking speedstep_time=parms.step_time; % [s] desired step durationI_o=mh*L^2; % [kg*m^2] moment of inertia of leg about basedowntime=parms.downtime; % [s] time that the head is moving% state vector: x = [theta; thetadot]% these statements are necessary in order to set event handling:% ode45 will stop the integration when the event occursoptions = odeset('abstol',1e-8,'reltol',1e-8);% integrate using ode45 and the state-derivative function[t,state] = ode45(@fbird_stance, [0 step_time], state0, options);% check for energy conservation during stance phase[Ekin_stance,Wgravity,Wneck] = energy_bird(state);% perform push off and collision. It is assumed that there is no% interaction with the head during these events; i.e. the massless and% deformable neck does nothing ... phi_minus = state(end,1); % leg angle [rad]phid_minus = state(end,2); % [rad/s]% linear momentum of pelvis prior to push offmv_stance_end=mp*L*phid_minus*[-sin(phi_minus); cos(phi_minus)]; %[kg*m/s] % linear momentum of pelvis after push offmv_minus=mv_stance_end + phat_push*[cos(phi_minus); sin(phi_minus)]; %[kg*m/s] % positive work done by push off; equals change in kinetic energy:Wpush=.5*(mv_minus'*mv_minus - mv_stance_end'*mv_stance_end)/mp; % [J]% update stance leg angle (and x coordinate of base??)phi_plus = phi_minus+2*alpha; % [rad]% find linear momentum of pelvis after collision by projecting onto new% movement direction of pelvis: -c1*e_n + c2*e_t = mv_mius; solve for c1/c2e_n=[cos(phi_plus); sin(phi_plus)]; % vector in direction of new stance lege_t=[-sin(phi_plus); cos(phi_plus)]; % vector in tangential direction of new stance legc=[-e_n e_t]\mv_minus; mv_plus=c(2)*e_t; % linear momentum of pelvis after push off and collisonphat_coll=c(1)*e_n; % [kg*m/s] collision impulse CHECK DIRECTION!!% update stance leg angular velocity; just pick x direction equation ... phid_plus=mv_plus(1)/(mp*L*-sin(phi_plus));% Energy dissipated by collision:Wcoll=.5*(mv_plus'*mv_plus - mv_minus'*mv_minus)/mp; % [J]% Kinetic energy after collision, per stance leg angular velocityEkin_plus=.5*I_o*phid_plus.^2;keyboard% end of bird_step; local functions follow%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function stated = fbird_stance(t,state)% state-derivative function for bird stance phase% the model consists of a point mass pelvis on a leg, in a rimlesswheel% setting. A point mass head is connected to the pelvis via a massless blob% (neck). In this function the head is fully constrained to zero acceleration.phi = state(1); % leg angle [rad]phid = state(2); % [rad/s]xh = state(3); % [m] x coordinate of pigeon head wrt base of stance legxhd = state(4); % [m/s]xp=L*cos(phi); % [m] x coordinate of pelves% pure moment of neck on pelvis (to satisfy massless neck). M_np=(xp-xh)*-mh*g; % moment of force of neck on pelvis about base of stance leg.M_Fnp=xp*mh*g;% moment of gravitational force on pelvis about base of stance leg.M_Fgp=xp*mp*g;% impulse momentum equation about base of stance leg:phidd=(M_np + M_Fnp + M_Fgp)/I_o;% Head motion. In this case the derivative is zero such that the head is% stationary...stated = [phid; phidd; xhd; 0];end % fbird_stance%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function [Ekin,Wgravity,Wneck] = energy_bird(state)% returns the energy of the system at a given state% state can also be given as an arrayphi = state(:,1); % leg angle [rad]phid = state(:,2); % [rad/s]xh = state(:,3); % [m] x coordinate of pigeon head wrt base of stance legxhd = state(:,4); % [m/s]xp=L*cos(phi); % [m] x coordinate of pelvesyp = L*sin(phi); % [m] y coordiate of pelvis;% pure moment of neck on pelvis (to satisfy massless neck). M_np=(xp-xh)*-mh*g; % kinetic energy of legEkin = 0.5*I_o*phid.^2; %[J]Ekin = Ekin-Ekin(1); % [J] change in kinetic energy% mechanical work done on legWgravity = cumtrapz(yp,ones(size(yp))*mp*g); % [J] work done by gravity% work done by force and moment from neck on legWneck=cumtrapz(yp,ones(size(yp))*mh*g) + cumtrapz(phi,M_np); % [J]%Wtot = Wgravity+Wneck; % [J] total work done on legend % energyrwfunction [M] = cross2d(r,F)% computes cross product of two 2D vectorsM=r(1)*F(2)-r(2)*F(1);endend % outer function